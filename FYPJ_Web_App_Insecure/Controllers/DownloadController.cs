using FYPJ_Web_App_Insecure.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace FYPJ_Web_App_Insecure.Controllers
{


    public class DownloadController : Controller
    {
        public IConfiguration Configuration { get; }
        private readonly IActionDescriptorCollectionProvider provider;
        private readonly IWebHostEnvironment _webHostEnvironment;

        public DownloadController(IWebHostEnvironment webHostEnvironment, IConfiguration _configuration, IActionDescriptorCollectionProvider provider)
        {
            Configuration = _configuration;
            _webHostEnvironment = webHostEnvironment;

            this.provider = provider;
        }
        [HttpGet("/Routes")]
        public IActionResult Routes()
        {

            var urls = this.provider.ActionDescriptors.Items
        .Select(descriptor => '/' + string.Join('/', descriptor.RouteValues.Values
                                                                        .Where(v => v != null)
                                                                        .Select(c => c.ToLower())
                                                                        .Reverse()))
        .Distinct()
        .ToList();

            return Ok(urls);

        }
        [HttpGet("/download/download_database")]
        public async Task<IActionResult> Download_Database()
        {
            var path = $"{_webHostEnvironment.ContentRootPath}\\database.db";
            var fileName = "database.db";
           
            return PhysicalFile(path, "application/x-sqlite3", fileName);
            //var memory = new MemoryStream();
            //using (var stream = new FileStream(path, FileMode.Open))
            //{
            //    await stream.CopyToAsync(memory);
            //    stream.Close();

            //}
            //memory.Position = 0;
            //var ext = Path.GetExtension(path).ToLowerInvariant();



            //return File(memory, GetMimeTypes()[ext], Path.GetFileName(path));

        }
        [HttpGet("/Logs")]
        public IActionResult Logs()
        {
          
            string[] filePaths = Directory.GetFiles($"{_webHostEnvironment.ContentRootPath}/Logs/");

            //Copy File names to Model collection.
            List<FileModel> files = new List<FileModel>();
            foreach (string filePath in filePaths)
            {
                files.Add(new FileModel { FileName = Path.GetFileName(filePath) });
            }
            //Return the log files
            
            return View(files);
        }
        [HttpGet]
        [Route("querydb/{Dname?}")]
        public IActionResult Querydatabase(string? Dname)
        {
            try
            {

                var connectionStringBuilder = new SqliteConnectionStringBuilder();
                connectionStringBuilder.DataSource = _webHostEnvironment.ContentRootPath + @"/database.db";
                var connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
                connection.Open();
                var selectCmd_2 = connection.CreateCommand();
                //Input the query into string to execute command
                selectCmd_2.CommandText = Dname;
                var reader_2 = selectCmd_2.ExecuteReader();
                List<List<string>> bigmodel = new List<List<string>>();
                //Put the database query in nested list
                while (reader_2.Read())
                {
                    int count = reader_2.FieldCount;

                    var model = new List<string>();
                    for (int i = 0; i < count; i++)
                    {
                        model.Add(reader_2.GetValue(i).ToString());
                    }

                    bigmodel.Add(model);
                }
                reader_2.Close();
                return Ok(bigmodel);
            }
            catch (SqliteException sqlerror)
            {
                return Ok(sqlerror);
            }
           
        }
        public FileResult DownloadFile(string fileName)
        {
            var contentRoot = Configuration.GetValue<string>(WebHostDefaults.ContentRootKey);
            //Build the File Path.
            string path = Path.Combine(contentRoot, "Logs/") + fileName;
            //Send the File to Download.
            return PhysicalFile(path, "text/plain", fileName);
        }

        private Dictionary<string, string> GetMimeTypes()
        {
            return new Dictionary<string, string>
            {
                { ".jpg","image/jpeg"},
                { ".db","application/x-sqlite3"}
            };
        }
    }
}


using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using FYPJ_Web_App_Insecure.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using Google.Authenticator;
using System.Text.RegularExpressions;
using System.Security.Cryptography;

namespace FYPJ_Web_App_Insecure.Controllers
{
    [AutoValidateAntiforgeryToken]

    public class AccountController : Controller
    {
        private readonly databaseContext _dbc;
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly ILogger<HomeController> _logger;
        private static RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider();

        public AccountController(databaseContext dbc, IWebHostEnvironment webHostEnvironment, ILogger<HomeController> logger)
        {
            _dbc = dbc;
            _webHostEnvironment = webHostEnvironment;
            _logger = logger;
        }
        private static char Cipher(char ch, int key)
        {
            if (!char.IsLetter(ch))
                return ch;

            char offset = char.IsUpper(ch) ? 'A' : 'a';
            return (char)((((ch + key) - offset) % 26) + offset);
        }

        public static string Encipher(string input, int key)
        {
            string output = string.Empty;

            foreach (char ch in input)
                output += Cipher(ch, key);

            return output;
        }

        public static string Decipher(string input, int key)
        {
            return Encipher(input, 26 - key);
        }

        public IActionResult Index()
        {
            _logger.LogInformation("The register page has been accessed");

            return View();
        }
        private static string TwoFactorKey(int id)
        {
            return $"123456789+{id}";
        }

        private string GetImageUrlForProduct(string id)
        {
            var imageUrl = $"/files/Images/ProductImages/{id}.jpg";
            var path = _webHostEnvironment.WebRootFileProvider.GetFileInfo(imageUrl);
            return imageUrl;
        }

        [HttpPost]
        [AutoValidateAntiforgeryToken]
        public IActionResult Index(Customer cc)
        {

            try
            {
                var usr = _dbc.Customer.FromSqlRaw($"SELECT * FROM customer WHERE Username = '{cc.Username}' ");
                var email = _dbc.Customer.FromSqlRaw($"SELECT * FROM customer WHERE Uemail = '{cc.Uemail}' ");
                if (usr.FirstOrDefault() != null)
                {
                    ViewBag.message = "The username " + cc.Username + " already exists!";
                }
                else if (email.FirstOrDefault() != null)
                {
                    ViewBag.message = "The email " + cc.Uemail + " already exists!";
                }
                else
                {

                    cc.Active = "1";
                    cc.Pwd = Encipher(cc.Pwd, 3);
                    cc.enabled = false;
                    _dbc.Add(cc);
                    _dbc.SaveChanges();
                    ViewBag.message = "The User " + cc.Username + " Is Saved Successfully!";
                }
                return View();
            }
            catch (Exception sqlerror)
            {
                ViewBag.message = sqlerror;
            }
            return View();
        }


        [HttpGet]
        public IActionResult Login()
        {
            _logger.LogInformation("The login page has been accessed");
            ViewBag.Notification = TempData["ErrorMessage"];
            return View();
        }

        [HttpPost]
        [IgnoreAntiforgeryToken]
        public IActionResult Login(Customer model)
        {

            try
            {
                if (!ModelState.IsValid)
                {
                    return View(model);
                }
                if (model.Pwd != null && model.Username != null)
                {

                    int key = 3;
                    

                    var usr = _dbc.Customer.FromSqlRaw($"SELECT * FROM customer WHERE Username='{model.Username}' and Pwd='{Encipher(model.Pwd, key)}'");
                    // delete the user in the db
                    _dbc.Database.ExecuteSqlRaw($"SELECT * FROM customer WHERE Username='{model.Username}' and Pwd='{Encipher(model.Pwd, key)}'");
                    _dbc.SaveChanges();

                    if (usr.FirstOrDefault() != null)
                    {
                        if (usr.FirstOrDefault().Active == "1")
                        {
                            if (usr.FirstOrDefault().UserId == 1 && usr.FirstOrDefault().Username != "admin")
                            {
                                HttpContext.Response.Cookies.Append("user_id", $"{usr.FirstOrDefault().UserId}");
                                HttpContext.Session.SetInt32("UserId", (Int32)usr.FirstOrDefault().UserId);
                                HttpContext.Session.SetString("Username", usr.FirstOrDefault().Username.ToString());
                                return Redirect("/Home");
                            }
                            else if (usr.FirstOrDefault().UserId == 20 && model.Username != "Peter")
                            {
                                HttpContext.Response.Cookies.Append("user_id", $"{usr.FirstOrDefault().UserId}");
                                HttpContext.Session.SetInt32("UserId", (Int32)usr.FirstOrDefault().UserId);
                                HttpContext.Session.SetString("Username", usr.FirstOrDefault().Username.ToString());
                                return Redirect("/Home");
                            }
                            else
                            {
                                HttpContext.Response.Cookies.Append("user_id", $"{usr.FirstOrDefault().UserId}");
                                HttpContext.Session.SetInt32("UserId", (Int32)usr.FirstOrDefault().UserId);
                                HttpContext.Session.SetString("Username", usr.FirstOrDefault().Username.ToString());
                                return Redirect("/Home");
                            }
                        }
                        else
                        {
                            ViewBag.Notification = "User not found";
                        }
                    }
                    else
                    {
                        ViewBag.Notification = "Wrong username or password";
                        _logger.LogInformation("Failed login attempt");
                    }

                }
                else
                {
                    ViewBag.fillCredentials = "Please fill in your credentials!";
                }
            }

            catch (Exception sqlerror)
            {
                ViewBag.Notification = sqlerror;
            }

            return View();
        }
        public IActionResult Logout()
        {
            HttpContext.Session.Clear();
            foreach (var cookie in HttpContext.Request.Cookies)
            {
                Response.Cookies.Delete("user_id");
            }
            return Redirect("/Account/Login");
        }

        [HttpPost("Account/Deactivate")]
        [HttpPost("Account/Deactivate/{id:int}")]
        public IActionResult Deactivate(int id,CustomerTrans model,string Confirm)
        {
            Console.WriteLine(Confirm);
            _logger.LogInformation("The deactivate page has been accessed");
            if (Confirm != "Confirm")
            {
                ViewBag.notdeactivated = "Not Successful";
                HttpContext.Session.SetString("cannot_deactivate", "yes");
                return Redirect("/Account/myAccount/" + model.customer.UserId);
            }
            else
            {
                var user = _dbc.Customer.Where(x => x.UserId.Equals(id)).FirstOrDefault();
                user.Active = "0";
                _dbc.SaveChanges();
                HttpContext.Session.Clear();
                foreach (var cookie in HttpContext.Request.Cookies)
                {
                    Response.Cookies.Delete("user_id");
                }
                return Redirect("/Account/Login");
            }
        }
        [HttpPost]
        public IActionResult updatedefaultcc(string cc_id, string user_id)
        {
            var creditcard = _dbc.CreditCard.FromSqlRaw($"select * from CreditCard where userid = {user_id}").ToList();
            foreach (var x in creditcard)
            {
                if (x.cc_id != cc_id)
                {
                    x.default_card = false;
                    _dbc.SaveChanges();
                }
                else
                {
                    x.default_card = true;
                    _dbc.SaveChanges();
                }
            }
            return Redirect($"/Account/myAccount/{user_id}");
        }

        [HttpGet("Account/myAccount")]
        [HttpGet("Account/myAccount/{id:int}")]
        public IActionResult myAccount(int? id)
        {
            if (id != null)
            {
               
                _logger.LogInformation("The account page has been accessed");
                var user = _dbc.Customer.Where(x => x.UserId.Equals(id)).FirstOrDefault();
                if (user != null)
                {
                    TwoFactorAuthenticator twoFactor = new TwoFactorAuthenticator();
                    var setupInfo = twoFactor.GenerateSetupCode("myapp", user.Uemail, TwoFactorKey(user.UserId), false, 3);
                    ViewBag.SetupCode = setupInfo.ManualEntryKey;
                    ViewBag.BarcodeImageUrl = setupInfo.QrCodeSetupImageUrl;
                    if(user.enabled == true)
                    {
                        ViewBag.faenabled = "Enabled";
                    }
                    var creditcard = _dbc.CreditCard.FromSqlRaw($"select * from CreditCard where userid = {id}").ToList();

                    if (HttpContext.Request.Cookies["user_id"] == "1")
                    {
                        ViewBag.isAdmin = "True";
                    }
                    var orderHist = _dbc.OrderDetails.Where(x => x.CustomerID.Equals(id)).ToList();
                    CustomerTrans model = new CustomerTrans();
                    Customer customer = new Customer();
                    model.creditcard = creditcard;
                    model.orderHistory = orderHist;
                    customer.UserId = user.UserId;
                    customer.Username = user.Username;
                    customer.Pwd = user.Pwd;
                    customer.Confirmpwd = user.Confirmpwd;
                    customer.Uemail = user.Uemail;
                    customer.Postal_code = user.Postal_code;
                    customer.City = user.City;
                    customer.Phone = user.Phone;
                    customer.Active = user.Active;
                    customer.Secret_Ans = user.Secret_Ans;
                    customer.Secret_Qns = user.Secret_Qns;
                    model.customer = customer;
                    var connectionStringBuilder = new SqliteConnectionStringBuilder();
                    connectionStringBuilder.DataSource = _webHostEnvironment.ContentRootPath + @"/database.db";
                    var connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
                    connection.Open();

                    var selectCmd = connection.CreateCommand();
                    selectCmd.CommandText = "select * from Products";
                    var reader = selectCmd.ExecuteReader();

                    List<Products> models = new List<Products>();
                    while (reader.Read())
                    {
                        var items = new Products();
                        items.ProductId = reader.GetString(0);
                        items.Title = reader.GetString(1);
                        items.Author = reader.GetString(2);
                        items.Genre = reader.GetString(3);
                        items.Price = reader.GetDecimal(4);
                        items.image = GetImageUrlForProduct(reader.GetString(0));
                        models.Add(items);
                    }
                    reader.Close();
                    return View(model);

                }
                else
                {
                    ViewBag.error = "User ID does not exist!";
                    return View();
                }
            }
            else
            {
                ViewBag.error = "User ID does not exist!";
                return View();
            }
        }

        [HttpPost]
        public IActionResult Enable2fa(string inputCode)
        {
            var id = Int32.Parse(HttpContext.Request.Cookies["user_id"]);
            var user = _dbc.Customer.Where(x => x.UserId.Equals(id)).FirstOrDefault();
            TwoFactorAuthenticator twoFactor = new TwoFactorAuthenticator();
            var setupInfo = twoFactor.GenerateSetupCode("myapp", user.Uemail, TwoFactorKey(user.UserId), false, 3);
            bool isValid = twoFactor.ValidateTwoFactorPIN(TwoFactorKey(user.UserId), inputCode);
            if (!isValid)
            {
                return Redirect($"/Account/myAccount/{id}");
            }
            else
            {
                user.enabled = true;
                user.image = setupInfo.ManualEntryKey;
                _dbc.SaveChanges();
            }

            return Redirect($"/Account/myAccount/{id}");
        }
        [HttpGet]
        public IActionResult Authorize()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Authorize(string inputCode)
        {
            var id = Int32.Parse(HttpContext.Request.Cookies["user_id"]);
            var user = _dbc.Customer.Where(x => x.UserId.Equals(id)).FirstOrDefault();
            TwoFactorAuthenticator twoFactor = new TwoFactorAuthenticator();
            bool isValid = twoFactor.ValidateTwoFactorPIN(TwoFactorKey(user.UserId), inputCode);
            if (!isValid)
            {
                ViewBag.error = "Invalid code";
            }
            else
            {
               

                
                HttpContext.Response.Cookies.Append("user_id", $"{user.UserId}");
                HttpContext.Session.SetInt32("UserId", (Int32)user.UserId);
                HttpContext.Session.SetString("Username", user.Username.ToString());
                return Redirect("/Home");

            }
                return View();
        }




        [HttpGet("Account/editAccount")]
        [HttpGet("Account/editAccount/{id:int}")]
        public IActionResult EditAccount(int id)
        {
            _logger.LogInformation("The edit account page has been accessed");

            var user = _dbc.Customer.Where(x => x.UserId.Equals(id)).FirstOrDefault();
            

            return View(user);
        }

        [HttpPost]
        [IgnoreAntiforgeryToken]
        public IActionResult EditAccount(CustomerTrans model)
        {

            if (!ModelState.IsValid)
            {
                return View(model);
            }

            var user = _dbc.Customer.Where(x => x.UserId.Equals(HttpContext.Session.GetInt32("UserId"))).FirstOrDefault();
            user.Secret_Qns = model.customer.Secret_Qns;
            user.Secret_Ans = model.customer.Secret_Ans;
            user.Uemail = model.customer.Uemail;
            user.Username = model.customer.Username;
            user.Pwd = model.customer.Pwd;
            user.Confirmpwd = model.customer.Pwd;
            if(user.enabled == true)
            {
                user.enabled = true;
            }
            else
            {
                user.enabled = false;
            }
            _dbc.SaveChanges();
            
            
            return Redirect("/Account/myAccount/" + user.UserId);
        }
        [HttpGet]
        public IActionResult ForgotPassword()
        {
            return View();
        }

        [HttpPost]
        public IActionResult ForgotPassword(Customer model)
        {
            try
            {

                if (model.Pwd != model.Confirmpwd)
                {
                    ViewBag.NotSamePassword = "The passwords are not the same please try again!";
                }
                else
                {
                    var user = _dbc.Customer.FromSqlRaw($"SELECT * FROM customer WHERE Uemail='{model.Uemail}'");
                    if (user.FirstOrDefault() != null)
                    {

                        if (model.Secret_Qns != user.FirstOrDefault().Secret_Qns)
                        {
                            ViewBag.WrongQuestion = "You secret question is wrong!";
                        }
                        else if (model.Secret_Ans != user.FirstOrDefault().Secret_Ans)
                        {
                            ViewBag.WrongAnswer = "You secret answer is wrong!";
                        }
                        else
                        {
                            user.FirstOrDefault().Pwd = model.Pwd;
                            user.FirstOrDefault().Confirmpwd = Encipher(model.Confirmpwd, 3);
                            _dbc.SaveChanges();
                            ViewBag.Successfull = "Changed Sucessfully";
                           
                        }
                    }
                    else
                    {
                        ViewBag.NotValidUser = "The user does not exist!";
                    }

                }
            }
            catch (Exception sqlerror)
            {
                ViewBag.NotSamePassword = sqlerror;
            }
            return View();


        }




    }
}
